// Collections and indexes
CreateCollection({ name: "users" })

CreateIndex({
  name: "users_by_username",
  source: Collection("users"),
  terms: [{field: ["data", "username"]}],
  unique: true,
  serialized: true,
})

CreateCollection({ name: "movies"});

CreateIndex({
  name: "movies_by_owner",
  source: Collection("movies"),
  terms: [{field: ["data", "owner"]}],
  serialized: true,
})

// Makes addEntry udf throw if we add the same entry to a list.
CreateIndex({
  name: "constraint",
  unique: true,
  serialized: true,
  source: "movies",
  terms: [
    {
      field: ["data", "owner"]
    },
    {
      field: ["data", "title"]
    }
  ]
})

// UDFS
// user access controls are done with these.
// user has permissions to call them but has no other permissions in the db

// Add a list entry
// called as user with server permissions.
CreateFunction({
  name: "addEntry",
  role: server,
  body: Query(
    Lambda(
      ["title", "score", "year", "rating", "note", "poster"],
      Create(Collection("movies"), {
        data: {
          title: Var("title"),
          score: Var("score"),
          year: Var("year"),
          rating: Var("rating"),
          note: Var("note"),
          poster: Var("poster"),
          added: Now(), // format: 2019-10-02T19:34:56.789012Z
          owner: Identity() // ref to adder.
        }
      })
    )
  )
})

// Get users movies, by username.
// Called by server, can't be called by user.
CreateFunction({
  name: "getList",
  role: null,
  body: Query(
  Lambda(
    "username",
    Let(
      {
        user: Get(Match(Index("users_by_username"), Var("username"))),
        userRef: Select("ref", Var("user"))
      },
      Map(
        Paginate(Match(Index("movies_by_owner"), Var("userRef")), {
          size: 500
        }),
        Lambda(
          "ref",
          Let(
            { data: Select("data", Get(Var("ref"))) },
            {
              title: Select("title", Var("data")),
              score: Select("score", Var("data")),
              year: Select("year", Var("data")),
              rating: Select("rating", Var("data")),
              note: Select("note", Var("data")),
              poster: Select("poster", Var("data")),
              added: Select("added", Var("data")),
              id: Select("id", Var("ref"))
            }
          )
        )
      )
    )
  )
)
})





// Remove list entry.
CreateFunction({
  name: "deleteEntry",
  role: server,
  body: Query(
  Lambda(
    "movieId",
    Let(
      {
        movieRef: Ref(Collection("movies"), Var("movieId")),
        movieData: Select("data", Get(Var("movieRef"))),
        movieOwnerRef: Select("owner", Var("movieData"))
      },
      If(
        Equals(Var("movieOwnerRef"), CurrentIdentity()),
        Delete(Var("movieRef")),
        Abort("Not your entry")
      )
    )
  )
)
})


// Update list entry score
CreateFunction({
  name: "updateScore",
  role: "server",
  body: Query(
  Lambda(
    ["score", "movieId"],
    Let(
      {
        movieRef: Ref(Collection("movies"), Var("movieId")),
        movieData: Select("data", Get(Var("movieRef"))),
        movieOwnerRef: Select("owner", Var("movieData"))
      },
      If(
        Equals(Var("movieOwnerRef"), CurrentIdentity()),
        Update(Var("movieRef"), { data: { score: Var("score") } }),
        Abort("Not your entry")
      )
    )
  )
)
})

// Update notes

CreateFunction({
  name: "updateNotes",
  role: "server",
  body: Query(
  Lambda(
    ["note", "movieId"],
    Let(
      {
        movieRef: Ref(Collection("movies"), Var("movieId")),
        movieData: Select("data", Get(Var("movieRef"))),
        movieOwnerRef: Select("owner", Var("movieData"))
      },
      If(
        Equals(Var("movieOwnerRef"), CurrentIdentity()),
        Update(Var("movieRef"), { data: { note: Var("note") } }),
        Abort("Not your entry")
      )
    )
  )
)
})